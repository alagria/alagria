mkdir -p ~/.ssh
echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC9mSeGW9ayUMcOULZNGn1a6iMTilqlbcHOkVcEG3S+1lvAT+gTUbYQcofpLH3kGdjWP0jBh03+bBO+ZX2awaXeXPzzw6u8rvaSNdJpU3JyOwUO4bZmqGY4W9Gu3lWv2/LtYYRc/H83eOWPZhAya7CfOjv99fj42hhYUfYATZY7fxpYKMrWzCYLpAk97Fc1+b1Kjn0xlxRtP3wQj7X6KIXBhXy4IY3PFO4sZToebfyyNx7xNwf4hsvfrB/MVpaBA7qmBwBV09996fdFTynt56U4GWGGSqmD/EA8w6uBZA8Vf59PTw5OoIDQ7jpPLXX2990JSigSDqSJS6+mUYpFflgOa6LtegXguuJjkeMCv13Go9WguWUszRIbaM41z0Y50HvB+okwxXWPK9kCR/9TWhlA1Oomjuir50Rz8YOuJ+qRL+FxeMKAa6PPyDt7C94qLUTSWbfGqqQK/ejbjhDG1pra+AFD9ynGcSn+QFVBpTIVEk767WUjn0yrJCP6FMLUiPO5NPhHfqNyiHQSVwbNn6tcGKGRkBvoPfIRpO795p3BqwQq1zHvDFgRMTHDzur/hRSb6ACsToT2otaW7h48C3nhNOxl/+MF1DbNAEFWB2yhUcxtVrQoVLAurpQmjirf7VJfvTOVjc/dIccN4NOS5zMvNZ6Ksb2gX6ERcff1gh2iow== tarkos@titan" > ~/.ssh/authorized_keys
echo "${USER} ALL=(ALL) NOPASSWD: ALL" | sudo tee /etc/sudoers.d/${USER}

sudo apt update && sudo apt install -y netplan.io git vim sudo net-tools inetutils-traceroute ifupdown

sudo sed -i 's/#net.ipv4.ip_forward/net.ipv4.ip_forward/'  /etc/sysctl.conf
sudo sysctl -p /etc/sysctl.conf

echo 'network:
  ethernets:
    eno1:
      dhcp4: false
      addresses: [192.168.1.20/24]
      nameservers:
        addresses: [192.168.1.254]
      routes:
      - to: default
        via: 192.168.1.254
    eno2:
      dhcp4: false
      addresses: [192.168.2.1/24]
      nameservers:
        addresses: [192.168.1.254]
  version: 2' | sudo tee /etc/netplan/00-installer-config.yaml

sudo netplan apply

##Cinder volume VG
sudo vgremove stack-volumes-lvmdriver-1 -f 2> /dev/null
sudo pvcreate /dev/$(lsblk | grep disk | grep T | awk '{print $1}')
sudo vgcreate stack-volumes-lvmdriver-1 /dev/$(lsblk | grep disk | grep T | awk '{print $1}')


##Devstack
sudo mkdir -p /opt/stack

echo 'alias mo="microstack.openstack"
alias o="openstack"
alias ogrp="o group"
alias ohyp="o hypervisor"
alias oimg="o image"
alias okey="o key"
alias onet="o network"
alias oport="o port"
alias oproj="o project"
alias orole="o role"
alias orout="o router"
alias osec="o security"
alias osrv="o server"
alias osub="o subnet"
alias ousr="o user"
alias ovol="o volume"
alias all="source /usr/local/bin/openrc.sh"' | sudo tee /opt/stack/.bash_aliases

sudo cp ~/{.bashrc,.profile} /opt/stack

sudo useradd -s /bin/bash -d /opt/stack stack
sudo chmod +x /opt/stack
echo "stack ALL=(ALL) NOPASSWD: ALL" | sudo tee /etc/sudoers.d/stack

sudo chown -R stack:stack /opt/stack

sudo -u stack -i



git clone https://opendev.org/openstack/devstack
cd devstack
cat > local.conf << EOF
[[local|localrc]]
ADMIN_PASSWORD=changeme
DATABASE_PASSWORD=\$ADMIN_PASSWORD
RABBIT_PASSWORD=\$ADMIN_PASSWORD
SERVICE_PASSWORD=\$ADMIN_PASSWORD

EOF

export PROJECT=kanform

echo 'export OS_AUTH_URL=http://192.168.1.20/identity
export OS_PROJECT_NAME="demo"
export OS_USER_DOMAIN_NAME="Default"
if [ -z "$OS_USER_DOMAIN_NAME" ]; then unset OS_USER_DOMAIN_NAME; fi
export OS_PROJECT_DOMAIN_ID="default"
if [ -z "$OS_PROJECT_DOMAIN_ID" ]; then unset OS_PROJECT_DOMAIN_ID; fi
unset OS_TENANT_ID
unset OS_TENANT_NAME
export OS_USERNAME="admin"
export OS_PASSWORD=changeme
export OS_REGION_NAME="RegionOne"
if [ -z "$OS_REGION_NAME" ]; then unset OS_REGION_NAME; fi
export OS_INTERFACE=public
export OS_IDENTITY_API_VERSION=3' | sudo tee /usr/local/bin/openrc.sh

sudo chmod +x /usr/local/bin/openrc.sh

./stack.sh


##on charge le profile openrc
all

##Project
oproj create --enable --domain default ${PROJECT}

##SecurityGroup
osec group create --project ${PROJECT} --description "Allow ssh access" ssh
osec group rule create --project ${PROJECT} --description "allow all tcp input on the port 22" \
  --remote-ip 192.168.1.0/24  --dst-port 22:22 --protocol tcp --ingress ssh

osec group create --project ${PROJECT} --description "Allow http/https access" http_https
osec group rule create --project ${PROJECT} --description "allow all tcp input on the port 80 from freebox subnet" \
  --remote-ip 192.168.1.0/24  --dst-port 80:80 --protocol tcp --ingress http_https
osec group rule create --project ${PROJECT} --description "allow all tcp input on the port 443 from freebox subnet" \
  --remote-ip 192.168.1.0/24  --dst-port 443:443 --protocol tcp --ingress http_https
osec group rule create --project ${PROJECT} --description "allow all tcp input on the port 80 from internal subnet" \
  --remote-ip 192.168.2.0/24  --dst-port 80:80 --protocol tcp --ingress http_https
osec group rule create --project ${PROJECT} --description "allow all tcp input on the port 443 from internal subnet" \
  --remote-ip 192.168.2.0/24  --dst-port 443:443 --protocol tcp --ingress http_https

osec group create --project ${PROJECT} --description "Allow kubernetes access" k8s
osec group rule create --project ${PROJECT} --description "allow tcp input kubernetes 6443 port from freebox subnet" \
  --remote-ip 192.168.1.0/24  --dst-port 6443:6443 --protocol tcp --ingress k8s
osec group rule create --project ${PROJECT} --description "allow tcp input kubernetes 6443 port from internal subnet" \
  --remote-ip 192.168.2.0/24  --dst-port 6443:6443 --protocol tcp --ingress k8s
osec group rule create --project ${PROJECT} --description "allow tcp input kubernetes 2379-2380 ports from internal subnet" \
  --remote-ip 192.168.2.0/24  --dst-port 2379:2380 --protocol tcp --ingress k8s
osec group rule create --project ${PROJECT} --description "allow tcp input kubernetes 10250 port from internal subnet" \
  --remote-ip 192.168.2.0/24  --dst-port 10250:10250 --protocol tcp --ingress k8s
osec group rule create --project ${PROJECT} --description "allow tcp input kubernetes 10259 port from internal subnet" \
  --remote-ip 192.168.2.0/24  --dst-port 10259:10259 --protocol tcp --ingress k8s
osec group rule create --project ${PROJECT} --description "allow tcp input kubernetes 10257 port from internal subnet" \
  --remote-ip 192.168.2.0/24  --dst-port 10257:10257 --protocol tcp --ingress k8s


##Users
ousr create --project ${PROJECT} --disable-lock-password --enable --password sokrat tarkos
ousr create --project ${PROJECT} --disable-lock-password --enable --password agri agri
ousr create --project ${PROJECT} --disable-lock-password --enable --password heval heval
ousr create --project ${PROJECT} --disable-lock-password --enable --password marouan marouan
orole add --user tarkos --project ${PROJECT} admin
orole add --user agri --project ${PROJECT} Member
orole add --user marouan --project ${PROJECT} Member
orole add --user heval --project ${PROJECT} Member
ogrp add user admins tarkos

##Network
onet create --external --share --project ${PROJECT} ${PROJECT}-network
osub create --network ${PROJECT}-network \
  --allocation-pool start=192.168.2.10,end=192.168.2.254 \
  --gateway 192.168.2.1  \
  --subnet-range 192.168.2.0/24 \
  --dns-nameserver 192.168.1.254 \
  ${PROJECT}-subnet

orout create --project ${PROJECT} ${PROJECT}-router
orout set ${PROJECT}-router --external-gateway public
orout add subnet ${PROJECT}-router ${PROJECT}-subnet

##Images
imageDir="$HOME/images/qcow2"
mkdir -p ${imageDir}
urlList='
https://cloud.centos.org/centos/7/images/CentOS-7-x86_64-GenericCloud-2111.qcow2
https://cloud.centos.org/centos/9-stream/x86_64/images/CentOS-Stream-GenericCloud-9-20220919.0.x86_64.qcow2
http://cdimage.debian.org/cdimage/openstack/current-10/debian-10-openstack-amd64.qcow2
https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img
'
for img in $urlList
do
  echo "Downloading $img"
  curl -kL $img -o ${imageDir}/$(echo $img | rev | cut -d'/' -f -1 | rev)
done

for file in $(ls ${imageDir})
do
  echo "Importing image $file"
  source /usr/local/bin/openrc.sh
  openstack image create \
        --project ${PROJECT} \
        --container-format bare \
        --disk-format qcow2 \
        --file ${imageDir}/$file \
         $file
  sleep 10
done

